[{"name":"abstract val id: String","description":"com.funyinkash.kachecontroller.Model.id","location":"mongo-redis/com.funyinkash.kachecontroller/-model/id.html","searchKeys":["id","abstract val id: String","com.funyinkash.kachecontroller.Model.id"]},{"name":"class KacheController(val cacheEnabled: () -> Boolean = { true }, client: RedisCoroutinesCommands<String, String>)","description":"com.funyinkash.kachecontroller.KacheController","location":"mongo-redis/com.funyinkash.kachecontroller/-kache-controller/index.html","searchKeys":["KacheController","class KacheController(val cacheEnabled: () -> Boolean = { true }, client: RedisCoroutinesCommands<String, String>)","com.funyinkash.kachecontroller.KacheController"]},{"name":"constructor(cacheEnabled: () -> Boolean = { true }, client: RedisCoroutinesCommands<String, String>)","description":"com.funyinkash.kachecontroller.KacheController.KacheController","location":"mongo-redis/com.funyinkash.kachecontroller/-kache-controller/-kache-controller.html","searchKeys":["KacheController","constructor(cacheEnabled: () -> Boolean = { true }, client: RedisCoroutinesCommands<String, String>)","com.funyinkash.kachecontroller.KacheController.KacheController"]},{"name":"fun <T : Model> MongoCollection<T>.cacheKey(): String","description":"com.funyinkash.kachecontroller.KacheController.cacheKey","location":"mongo-redis/com.funyinkash.kachecontroller/-kache-controller/cache-key.html","searchKeys":["cacheKey","fun <T : Model> MongoCollection<T>.cacheKey(): String","com.funyinkash.kachecontroller.KacheController.cacheKey"]},{"name":"fun <T : Model> MongoCollection<T>.volatileCashKey(): String","description":"com.funyinkash.kachecontroller.KacheController.volatileCashKey","location":"mongo-redis/com.funyinkash.kachecontroller/-kache-controller/volatile-cash-key.html","searchKeys":["volatileCashKey","fun <T : Model> MongoCollection<T>.volatileCashKey(): String","com.funyinkash.kachecontroller.KacheController.volatileCashKey"]},{"name":"interface Model","description":"com.funyinkash.kachecontroller.Model","location":"mongo-redis/com.funyinkash.kachecontroller/-model/index.html","searchKeys":["Model","interface Model","com.funyinkash.kachecontroller.Model"]},{"name":"suspend fun <T : Model, R : Any> getVolatile(fieldName: String, collection: MongoCollection<T>, serializer: KSerializer<R>, setData: suspend MongoCollection<T>.() -> R): R","description":"com.funyinkash.kachecontroller.KacheController.getVolatile","location":"mongo-redis/com.funyinkash.kachecontroller/-kache-controller/get-volatile.html","searchKeys":["getVolatile","suspend fun <T : Model, R : Any> getVolatile(fieldName: String, collection: MongoCollection<T>, serializer: KSerializer<R>, setData: suspend MongoCollection<T>.() -> R): R","com.funyinkash.kachecontroller.KacheController.getVolatile"]},{"name":"suspend fun <T : Model> get(id: String, collection: MongoCollection<T>, serializer: KSerializer<T>, getData: suspend MongoCollection<T>.() -> T?): T?","description":"com.funyinkash.kachecontroller.KacheController.get","location":"mongo-redis/com.funyinkash.kachecontroller/-kache-controller/get.html","searchKeys":["get","suspend fun <T : Model> get(id: String, collection: MongoCollection<T>, serializer: KSerializer<T>, getData: suspend MongoCollection<T>.() -> T?): T?","com.funyinkash.kachecontroller.KacheController.get"]},{"name":"suspend fun <T : Model> getAll(collection: MongoCollection<T>, serializer: KSerializer<T>, cacheKey: String = collection.cacheKey(), getData: suspend MongoCollection<T>.() -> List<T>): List<T>","description":"com.funyinkash.kachecontroller.KacheController.getAll","location":"mongo-redis/com.funyinkash.kachecontroller/-kache-controller/get-all.html","searchKeys":["getAll","suspend fun <T : Model> getAll(collection: MongoCollection<T>, serializer: KSerializer<T>, cacheKey: String = collection.cacheKey(), getData: suspend MongoCollection<T>.() -> List<T>): List<T>","com.funyinkash.kachecontroller.KacheController.getAll"]},{"name":"suspend fun <T : Model> remove(id: String, collection: MongoCollection<T>, deleteData: suspend MongoCollection<T>.() -> Boolean): Boolean","description":"com.funyinkash.kachecontroller.KacheController.remove","location":"mongo-redis/com.funyinkash.kachecontroller/-kache-controller/remove.html","searchKeys":["remove","suspend fun <T : Model> remove(id: String, collection: MongoCollection<T>, deleteData: suspend MongoCollection<T>.() -> Boolean): Boolean","com.funyinkash.kachecontroller.KacheController.remove"]},{"name":"suspend fun <T : Model> removeAll(collection: MongoCollection<T>, deleteData: suspend MongoCollection<T>.() -> Boolean): Boolean","description":"com.funyinkash.kachecontroller.KacheController.removeAll","location":"mongo-redis/com.funyinkash.kachecontroller/-kache-controller/remove-all.html","searchKeys":["removeAll","suspend fun <T : Model> removeAll(collection: MongoCollection<T>, deleteData: suspend MongoCollection<T>.() -> Boolean): Boolean","com.funyinkash.kachecontroller.KacheController.removeAll"]},{"name":"suspend fun <T : Model> set(collection: MongoCollection<T>, serializer: KSerializer<T>, setData: suspend MongoCollection<T>.() -> T?): T?","description":"com.funyinkash.kachecontroller.KacheController.set","location":"mongo-redis/com.funyinkash.kachecontroller/-kache-controller/set.html","searchKeys":["set","suspend fun <T : Model> set(collection: MongoCollection<T>, serializer: KSerializer<T>, setData: suspend MongoCollection<T>.() -> T?): T?","com.funyinkash.kachecontroller.KacheController.set"]},{"name":"suspend fun <T : Model> setAll(collection: MongoCollection<T>, serializer: KSerializer<T>, cacheKey: String = collection.cacheKey(), setData: suspend MongoCollection<T>.() -> List<T>?): Boolean","description":"com.funyinkash.kachecontroller.KacheController.setAll","location":"mongo-redis/com.funyinkash.kachecontroller/-kache-controller/set-all.html","searchKeys":["setAll","suspend fun <T : Model> setAll(collection: MongoCollection<T>, serializer: KSerializer<T>, cacheKey: String = collection.cacheKey(), setData: suspend MongoCollection<T>.() -> List<T>?): Boolean","com.funyinkash.kachecontroller.KacheController.setAll"]},{"name":"val cacheEnabled: () -> Boolean","description":"com.funyinkash.kachecontroller.KacheController.cacheEnabled","location":"mongo-redis/com.funyinkash.kachecontroller/-kache-controller/cache-enabled.html","searchKeys":["cacheEnabled","val cacheEnabled: () -> Boolean","com.funyinkash.kachecontroller.KacheController.cacheEnabled"]}]