[{"name":"abstract val id: String","description":"Model.id","location":"-kache-controller/[root]/-model/id.html","searchKeys":["id","abstract val id: String","Model.id"]},{"name":"class KacheController(val cacheEnabled: () -> Boolean, client: RedisCommands<String, String>)","description":"KacheController","location":"-kache-controller/[root]/-kache-controller/index.html","searchKeys":["KacheController","class KacheController(val cacheEnabled: () -> Boolean, client: RedisCommands<String, String>)","KacheController"]},{"name":"constructor(cacheEnabled: () -> Boolean, client: RedisCommands<String, String>)","description":"KacheController.KacheController","location":"-kache-controller/[root]/-kache-controller/-kache-controller.html","searchKeys":["KacheController","constructor(cacheEnabled: () -> Boolean, client: RedisCommands<String, String>)","KacheController.KacheController"]},{"name":"fun <T : Model> MongoCollection<T>.volatileCashKey(): String","description":"KacheController.volatileCashKey","location":"-kache-controller/[root]/-kache-controller/volatile-cash-key.html","searchKeys":["volatileCashKey","fun <T : Model> MongoCollection<T>.volatileCashKey(): String","KacheController.volatileCashKey"]},{"name":"interface Model","description":"Model","location":"-kache-controller/[root]/-model/index.html","searchKeys":["Model","interface Model","Model"]},{"name":"suspend fun <T : Model, R : Any> getVolatile(fieldName: String, collection: MongoCollection<T>, serializer: KSerializer<R>, setData: suspend MongoCollection<T>.() -> R): R","description":"KacheController.getVolatile","location":"-kache-controller/[root]/-kache-controller/get-volatile.html","searchKeys":["getVolatile","suspend fun <T : Model, R : Any> getVolatile(fieldName: String, collection: MongoCollection<T>, serializer: KSerializer<R>, setData: suspend MongoCollection<T>.() -> R): R","KacheController.getVolatile"]},{"name":"suspend fun <T : Model> cacheDel(id: String, collection: MongoCollection<T>, deleteData: suspend MongoCollection<T>.() -> Boolean): Boolean","description":"KacheController.cacheDel","location":"-kache-controller/[root]/-kache-controller/cache-del.html","searchKeys":["cacheDel","suspend fun <T : Model> cacheDel(id: String, collection: MongoCollection<T>, deleteData: suspend MongoCollection<T>.() -> Boolean): Boolean","KacheController.cacheDel"]},{"name":"suspend fun <T : Model> get(id: String, collection: MongoCollection<T>, serializer: KSerializer<T>, getData: suspend MongoCollection<T>.() -> T?): T?","description":"KacheController.get","location":"-kache-controller/[root]/-kache-controller/get.html","searchKeys":["get","suspend fun <T : Model> get(id: String, collection: MongoCollection<T>, serializer: KSerializer<T>, getData: suspend MongoCollection<T>.() -> T?): T?","KacheController.get"]},{"name":"suspend fun <T : Model> getAll(collection: MongoCollection<T>, serializer: KSerializer<T>, cacheKey: String = collection.namespace.collectionName, getData: suspend MongoCollection<T>.() -> List<T>): List<T>","description":"KacheController.getAll","location":"-kache-controller/[root]/-kache-controller/get-all.html","searchKeys":["getAll","suspend fun <T : Model> getAll(collection: MongoCollection<T>, serializer: KSerializer<T>, cacheKey: String = collection.namespace.collectionName, getData: suspend MongoCollection<T>.() -> List<T>): List<T>","KacheController.getAll"]},{"name":"suspend fun <T : Model> set(collection: MongoCollection<T>, serializer: KSerializer<T>, setData: suspend MongoCollection<T>.() -> T?): T?","description":"KacheController.set","location":"-kache-controller/[root]/-kache-controller/set.html","searchKeys":["set","suspend fun <T : Model> set(collection: MongoCollection<T>, serializer: KSerializer<T>, setData: suspend MongoCollection<T>.() -> T?): T?","KacheController.set"]},{"name":"suspend fun <T : Model> setAll(collection: MongoCollection<T>, serializer: KSerializer<T>, cacheKey: String = collection.namespace.collectionName, setData: suspend MongoCollection<T>.() -> List<T>?): Boolean","description":"KacheController.setAll","location":"-kache-controller/[root]/-kache-controller/set-all.html","searchKeys":["setAll","suspend fun <T : Model> setAll(collection: MongoCollection<T>, serializer: KSerializer<T>, cacheKey: String = collection.namespace.collectionName, setData: suspend MongoCollection<T>.() -> List<T>?): Boolean","KacheController.setAll"]},{"name":"val cacheEnabled: () -> Boolean","description":"KacheController.cacheEnabled","location":"-kache-controller/[root]/-kache-controller/cache-enabled.html","searchKeys":["cacheEnabled","val cacheEnabled: () -> Boolean","KacheController.cacheEnabled"]}]
